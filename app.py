import streamlit as st
import time
from datetime import datetime
from transformers import pipeline
from googletrans import Translator

# ---------------------- MODEL ----------------------
chatbot = pipeline("text-generation", model="distilgpt2", device=-1)

# ---------------------- PAGE CONFIG ----------------------
st.set_page_config(page_title="Digital GPT - AI Health Assistant", layout="wide")

# ---------------------- CUSTOM CSS ----------------------
st.markdown("""
<style>
/* Animated Gradient Background */
.stApp {
    background: linear-gradient(270deg, #00264d, #003366, #004080);
    background-size: 400% 400%;
    animation: gradientShift 15s ease infinite;
    color: white;
}
@keyframes gradientShift {
  0% {background-position: 0% 50%;}
  50% {background-position: 100% 50%;}
  100% {background-position: 0% 50%;}
}

/* Floating Bubbles */
.bubble {
    position: fixed;
    border-radius: 50%;
    opacity: 0.2;
    animation: floatUp 20s infinite;
}
@keyframes floatUp {
  from {transform: translateY(100vh);}
  to {transform: translateY(-10vh);}
}
.b1 {width: 120px; height: 120px; background: #00bcd4; left: 10%; animation-delay: 2s;}
.b2 {width: 80px; height: 80px; background: #ff4081; left: 60%; animation-delay: 4s;}

/* Fonts and Typography */
h1,h2,h3,h4 {color:white;}
.stTextInput > div > div > input {
    background-color: #1e2a38; color: white; border: 1px solid #333; border-radius: 6px; padding: 10px;
}
.stButton > button {
    background-color: #0052cc; color: white; border: none; border-radius: 6px; padding: 8px 20px; transition: 0.3s;
}
.stButton > button:hover {
    background-color: #007bff; transform: scale(1.05); box-shadow: 0px 0px 10px rgba(0,123,255,0.6);
}

/* Chat bubbles */
.chat-bubble-user {
    background-color: #0052cc; padding: 10px; border-radius: 10px; margin: 5px 0; color: white; text-align: right;
    animation: slideInRight 0.5s ease-out;
}
.chat-bubble-bot {
    background-color: #1e2a38; padding: 10px; border-radius: 10px; margin: 5px 0; text-align: left;
    animation: slideInLeft 0.5s ease-out;
}
@keyframes slideInRight { from {opacity: 0; transform: translateX(50px);} to {opacity: 1; transform: translateX(0);} }
@keyframes slideInLeft { from {opacity: 0; transform: translateX(-50px);} to {opacity: 1; transform: translateX(0);} }

.section {
    background-color: rgba(0, 0, 0, 0.2); padding: 15px; border-radius: 10px; margin-bottom: 15px;
}
</style>

<div class="bubble b1"></div>
<div class="bubble b2"></div>
""", unsafe_allow_html=True)

# ---------------------- SESSION STATE ----------------------
if "messages" not in st.session_state:
    st.session_state.messages = []

if "typing" not in st.session_state:
    st.session_state.typing = False

# ---------------------- TRANSLATION SETUP ----------------------
translator = Translator()
languages = {
    "English": "en",
    "Hindi": "hi",
    "Telugu": "te",
    "Tamil": "ta",
    "Kannada": "kn"
}

# ---------------------- MULTILINGUAL TEXTS ----------------------
multilingual_texts = {
    "English": {
        "app_title": "Digital GPT - AI Health Assistant",
        "description": "Your personal assistant for basic health guidance, diet tips, and symptom insights.",
        "ask_question": "Ask me anything about your health:",
        "placeholder": "Type your question here...",
        "send": "Send",
        "quick_actions": ["Hydration Tips", "Diet Advice", "Sleep Help", "Fitness Tips", "Clear Chat"],
        "upload_file": "Upload file",
        "book_appointment": "Book Appointment",
        "select_date": "Select a date",
        "select_time": "Select time",
        "confirm_appointment": "Confirm Appointment",
        "no_chat": "Start by typing your health question above.",
        "chat_history": "Chat History Summary",
        "last_query": "Last query:"
    },
    "Telugu": {
        "app_title": "‡∞°‡∞ø‡∞ú‡∞ø‡∞ü‡∞≤‡±ç GPT ‚Äì AI ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡±Å",
        "description": "‡∞Æ‡±Ä ‡∞µ‡±ç‡∞Ø‡∞ï‡±ç‡∞§‡∞ø‡∞ó‡∞§ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡±Å, ‡∞Æ‡±å‡∞≤‡∞ø‡∞ï ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡±á‡∞∂‡∞®‡∞Ç, ‡∞°‡±à‡∞ü‡±ç ‡∞∏‡±Ç‡∞ö‡∞®‡∞≤‡±Å, ‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç.",
        "ask_question": "‡∞Æ‡±Ä ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø:",
        "placeholder": "‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø...",
        "send": "‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø",
        "quick_actions": ["‡∞π‡±à‡∞°‡±ç‡∞∞‡±á‡∞∑‡∞®‡±ç ‡∞∏‡±Ç‡∞ö‡∞®‡∞≤‡±Å", "‡∞Ü‡∞π‡∞æ‡∞∞ ‡∞∏‡∞≤‡∞π‡∞æ‡∞≤‡±Å", "‡∞®‡∞ø‡∞¶‡±ç‡∞∞ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç", "‡∞´‡∞ø‡∞ü‡±ç‚Äå‡∞®‡±Ü‡∞∏‡±ç ‡∞∏‡±Ç‡∞ö‡∞®‡∞≤‡±Å", "‡∞ö‡∞æ‡∞ü‡±ç ‡∞ï‡±ç‡∞≤‡∞ø‡∞Ø‡∞∞‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø"],
        "upload_file": "‡∞´‡±à‡∞≤‡±ç‚Äå‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "book_appointment": "‡∞®‡∞ø‡∞Ø‡∞æ‡∞Æ‡∞ï‡∞Ç ÿ®⁄© ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "select_date": "‡∞§‡±á‡∞¶‡±Ä ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
        "select_time": "‡∞∏‡∞Æ‡∞Ø‡∞Ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
        "confirm_appointment": "‡∞®‡∞ø‡∞Ø‡∞æ‡∞Æ‡∞ï‡∞Ç ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "no_chat": "‡∞™‡±à ‡∞≤‡±ã ‡∞Æ‡±Ä ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç ‡∞Æ‡±ä‡∞¶‡∞≤‡±Å ‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡∞Ç‡∞°‡∞ø.",
        "chat_history": "‡∞ö‡∞æ‡∞ü‡±ç ‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞ ‡∞∏‡∞æ‡∞∞‡∞æ‡∞Ç‡∞∂‡∞Ç",
        "last_query": "‡∞§‡±Å‡∞¶‡∞ø ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®:"
    },
    "Hindi": {
        "app_title": "‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ GPT ‚Äì AI ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï",
        "description": "‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§π‡§æ‡§Ø‡§ï, ‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®, ‡§Ü‡§π‡§æ‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§î‡§∞ ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è‡•§",
        "ask_question": "‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç:",
        "placeholder": "‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Ø‡§π‡§æ‡§Å ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç...",
        "send": "‡§≠‡•á‡§ú‡•á‡§Ç",
        "quick_actions": ["‡§™‡§æ‡§®‡•Ä ‡§™‡•Ä‡§®‡•á ‡§ï‡•á ‡§∏‡•Å‡§ù‡§æ‡§µ", "‡§Ü‡§π‡§æ‡§∞ ‡§∏‡§≤‡§æ‡§π", "‡§®‡•Ä‡§Ç‡§¶ ‡§Æ‡§¶‡§¶", "‡§´‡§ø‡§ü‡§®‡•á‡§∏ ‡§∏‡•Å‡§ù‡§æ‡§µ", "‡§ö‡•à‡§ü ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç"],
        "upload_file": "‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "book_appointment": "‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•á‡§Ç",
        "select_date": "‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§ö‡•Å‡§®‡•á‡§Ç",
        "select_time": "‡§∏‡§Æ‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç",
        "confirm_appointment": "‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§ï‡§®‡•ç‡§´‡§º‡§∞‡•ç‡§Æ ‡§ï‡§∞‡•á‡§Ç",
        "no_chat": "‡§ä‡§™‡§∞ ‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§ï‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç‡•§",
        "chat_history": "‡§ö‡•à‡§ü ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂",
        "last_query": "‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®:"
    },
    "Kannada": {
        "app_title": "‡≤°‡≤ø‡≤ú‡≤ø‡≤ü‡≤≤‡≥ç GPT ‚Äì AI ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤∏‡≤π‡≤æ‡≤Ø‡≤ï",
        "description": "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤µ‡≥à‡≤Ø‡≤ï‡≥ç‡≤§‡≤ø‡≤ï ‡≤∏‡≤π‡≤æ‡≤Ø‡≤ï, ‡≤Æ‡≥Ç‡≤≤ ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ó‡≤¶‡≤∞‡≥ç‡≤∂‡≤®, ‡≤Ü‡≤π‡≤æ‡≤∞ ‡≤∏‡≤≤‡≤π‡≥Ü‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥ ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤ó‡≤æ‡≤ó‡≤ø.",
        "ask_question": "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø‡≤¶ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤è‡≤®‡≤æ‡≤¶‡≤∞‡≥Ç ‡≤ï‡≥á‡≤≥‡≤ø:",
        "placeholder": "‡≤á‡≤≤‡≥ç‡≤≤‡≤ø ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤ü‡≥à‡≤™‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø...",
        "send": "‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≤ø",
        "quick_actions": ["‡≤π‡≥à‡≤°‡≥ç‡≤∞‡≥á‡≤∂‡≤®‡≥ç ‡≤∏‡≤≤‡≤π‡≥Ü‡≤ó‡≤≥‡≥Å", "‡≤Ü‡≤π‡≤æ‡≤∞ ‡≤∏‡≤≤‡≤π‡≥Ü‡≤ó‡≤≥‡≥Å", "‡≤®‡≤ø‡≤¶‡≥ç‡≤¶‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø", "‡≤´‡≤ø‡≤ü‡≥ç‡≤®‡≥Ü‡≤∏‡≥ç ‡≤∏‡≤≤‡≤π‡≥Ü‡≤ó‡≤≥‡≥Å", "‡≤ö‡≤æ‡≤ü‡≥ç ‡≤ï‡≥ç‡≤≤‡≥Ä‡≤∞‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø"],
        "upload_file": "‡≤´‡≥à‡≤≤‡≥ç ‡≤Ö‡≤™‡≥ç‡≤≤‡≥ã‡≤°‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø",
        "book_appointment": "‡≤Ö‡≤™‡≤æ‡≤Ø‡≤ø‡≤Ç‡≤ü‡≥ç‚Äå‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤¨‡≥Å‡≤ï‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø",
        "select_date": "‡≤¶‡≤ø‡≤®‡≤æ‡≤Ç‡≤ï ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø",
        "select_time": "‡≤∏‡≤Æ‡≤Ø ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø",
        "confirm_appointment": "‡≤Ö‡≤™‡≤æ‡≤Ø‡≤ø‡≤Ç‡≤ü‡≥ç‚Äå‡≤Æ‡≥Ü‡≤Ç‡≤ü‡≥ç ‡≤¶‡≥É‡≤¢‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤ø",
        "no_chat": "‡≤Æ‡≥á‡≤≤‡≤ø‡≤®ÂÅ•Â∫∑ ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤ü‡≥à‡≤™‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤ø.",
        "chat_history": "‡≤ö‡≤æ‡≤ü‡≥ç ‡≤á‡≤§‡≤ø‡≤π‡≤æ‡≤∏ ‡≤∏‡≤æ‡≤∞‡≤æ‡≤Ç‡≤∂",
        "last_query": "‡≤ï‡≥ä‡≤®‡≥Ü‡≤Ø ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü:"
    },
    # Add Hindi, Tamil, Kannada similarly
}

# ---------------------- TOP BAR WITH LANGUAGE SELECTION ----------------------
top_left, top_right = st.columns([3, 1])
with top_right:
    selected_language = st.selectbox("üåê Language", list(languages.keys()))

texts = multilingual_texts[selected_language]

# ---------------------- BOT REPLY FUNCTION ----------------------
def get_bot_reply(user_text):
    text = user_text.lower()

    # Translate input to English if needed
    if selected_language != "English":
        user_text = translator.translate(user_text, dest='en').text
        text = user_text.lower()

    # Predefined responses
    if "cold" in text:
        reply = "ü§ß Try steam inhalation and stay hydrated. For persistent cold, consult a doctor."
    elif "pain" in text:
        reply = "üíä For mild pain, rest and hydration help. If severe, visit a physician."
    elif "diet" in text:
        reply = "ü•ó Include fruits, vegetables, proteins, and avoid junk food."
    elif "sleep" in text:
        reply = "üò¥ Keep a regular sleep schedule and avoid caffeine late in the day."
    elif "fever" in text:
        reply = "üå°Ô∏è Drink fluids, rest, and take paracetamol if needed."
    elif "fitness" in text:
        reply = "üèãÔ∏è Regular exercise, stretching, and staying active improve health."
    elif "hydration" in text or "water" in text:
        reply = "üíß Drink at least 8 glasses of water daily and stay hydrated."
    else:
        # fallback to GPT
        generated = chatbot(user_text, max_length=100, num_return_sequences=1)
        reply = generated[0]['generated_text']

    # Translate reply back to selected language
    if selected_language != "English":
        reply = translator.translate(reply, dest=languages[selected_language]).text

    return reply

# ---------------------- HEADER ----------------------
header_left, header_right = st.columns([2.5, 1])

with header_left:
    st.markdown(f"## ü©∫ {texts['app_title']}")
    st.markdown(texts['description'])

    # ---------------------- QUICK ACTIONS ----------------------
    st.markdown(f"### ‚ö° {texts['ask_question']}")

    def handle_quick_action(action_name):
        st.session_state.messages.append(("user", action_name))
        with st.spinner("ü§ñ Digital GPT is typing..."):
            time.sleep(1.2)
            reply = get_bot_reply(action_name)
            st.session_state.messages.append(("bot", reply))

    qa_cols = st.columns(len(texts['quick_actions']))
    for i, action in enumerate(texts['quick_actions']):
        qa_cols[i].button(action, on_click=lambda a=action: handle_quick_action(a))

    # ---------------------- USER INPUT ----------------------
    def send_message():
        user_text = st.session_state.user_input_box
        if user_text:
            st.session_state.messages.append(("user", user_text))
            st.session_state.typing = True
            with st.spinner("ü§ñ Digital GPT is typing..."):
                time.sleep(1.5)
                reply = get_bot_reply(user_text)
                st.session_state.messages.append(("bot", reply))
            st.session_state.typing = False
            st.session_state.user_input_box = ""

    col_query = st.columns([4, 1])
    user_input = col_query[0].text_input("", placeholder=texts['placeholder'], key="user_input_box")
    col_query[1].button(texts['send'], on_click=send_message)

    # ---------------------- CONVERSATION AREA ----------------------
    st.markdown("### üí¨ Conversation")
    chat_container = st.container()
    with chat_container:
        if not st.session_state.messages:
            st.info(texts['no_chat'])
        else:
            for sender, msg in st.session_state.messages:
                timestamp = datetime.now().strftime("%H:%M")
                if sender == "user":
                    st.markdown(
                        f'<div class="chat-bubble-user">{msg}<div style="font-size:10px;color:#ccc;">{timestamp}</div></div>',
                        unsafe_allow_html=True)
                else:
                    st.markdown(
                        f'<div class="chat-bubble-bot">{msg}<div style="font-size:10px;color:#ccc;">{timestamp}</div></div>',
                        unsafe_allow_html=True)

# ---------------------- RIGHT PANEL ----------------------
with header_right:
    st.markdown(f"### üì§ {texts['upload_file']}")
    st.file_uploader("", type=["png", "jpg", "jpeg", "mp4", "mov"], label_visibility="collapsed")

    st.markdown(f"### üìÖ {texts['book_appointment']}")
    appt_date = st.date_input(texts['select_date'], datetime.now())
    appt_time = st.time_input(texts['select_time'], datetime.now().time())
    if st.button(texts['confirm_appointment']):
        st.success(f"‚úÖ {texts['confirm_appointment']} {appt_date} at {appt_time}.")

    st.markdown(f"### üïì {texts['chat_history']}")
    if st.session_state.messages:
        last_user = [msg for sender, msg in st.session_state.messages if sender == "user"]
        if last_user:
            st.write(f"**{texts['last_query']}** {last_user[-1]}")
    else:
        st.info(texts['no_chat'])
